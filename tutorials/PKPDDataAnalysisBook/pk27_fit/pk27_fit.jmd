---
title : Exercise PK27 - Fitting Target Mediated Drug Disposition
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

In this exercise we will learn how to develop a **full Target Mediated Drug Disposition**
 **Model (TMDD)**. We will use data from _ligand, receptor and complex_. This will help
 us to improve the parameters precision. We have used a dose range of `1.5, 5, 5
  45 mg/kg`. We will also compare the full TMDD model to a two-compartment
  Michaelis Menten and parallel linear elimination model (reduced model). We will
  check if the true parameters of the TMDD model be replaced with two reduced
  parameters of the reduced model.

The basic workflow for the estimation process is:

 1. Description of the data
 2. Exploratory analysis of the data
 3. NCA Analysis
 4. Pharmacokinetic modelling
 5. Diagnostic Plots
 6. Validation
 7. Model Comparison

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using Plots
using StatsPlots
using Pipe
using StatsBase
using PrettyTables
```

## Description of the given data

A total of 12 subjects, 3 subjects in each group receive a dose of **1.5, 5, 15 & 45 mg/kg**
 respectively. The doses are given as an `Intravenous Bolus` and then PK samples
 are collected at various time intervals `0.1, 1, 10, 24, 72, 120, 168, 240, 360,
 499 hrs`. Data is collected upto 500 hrs, this will provide us with all the four
 phases observed in the ligand concentration.

The following are the units of the dataset:

  * Time (time) = hrs
  * Ligand Concentrations (dv_cp) = mg/L
  * Receptor Concentrations (dv_rec) = mg/L
  * Complex Concentration (dv_com) = mg/L
  * Dose (amt) = mg/kg
  * Group ( `1` : Dose=1.5mg/kg, `2` : Dose=5mg/kg, `3` : Dose=15mg/kg, `4` : Dose=45mg/kg)

```julia
pk27_data_df = CSV.read("/Users/Parsshava/Desktop/Julia/PumasTutorials.jl/tutorials/PKPDDataAnalysisBook/pk27_fit/pk_27.csv",
  DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic `summary` statistics of the data

```julia
stats_pk27_data = describe(pk27_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv_cp,:dv_rec,:dv_com])
```

## Exploratory Plots of the given data

 * Plot of Plasma Concentration vs Time

```julia
pk_data_plot = dropmissing(pk27_data_df, :dv_cp)
@df pk_data_plot plot(:time, :dv_cp, group=:id, color=:Group, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (mg/L)",
                      guidefontsize = 12, size = (600, 600),
                      title = "Plasma Concentrations vs Time")
```

 * Plot of the Mean Plasma Concentration vs Time

```julia
plasma_mean = combine(groupby(pk27_data_df,[:Group, :time]),
                            [col => fun for col in [:dv_cp]
                            for fun in [mean, geomean, std]])


@df plasma_mean plot(:time, :dv_cp_mean, group=:Group, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (mg/L)",
                      guidefontsize = 12, size = (600, 600),
                      title = "Mean Plasma Concentrations vs Time")
@df plasma_mean scatter!(:time, :dv_cp_mean, group=:Group, label=false)
```

We show an expansion of the first `80 hrs`, you can see how initally the dip in
 concentration is larger at the lower doses and keeps on decreasing.

```julia
plasma_mean_80 = filter(x -> x.time <= 80.0, plasma_mean)
@df plasma_mean_80 plot(:time, :dv_cp_mean, group=:Group, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (mg/L)",
                      size = (300, 500), ylims=(10,1000),
                      title = "Mean Concentration vs Time")
@df plasma_mean_80 scatter!(:time, :dv_cp_mean, group=:Group, label=false)
```

 * Plot of Receptor Concentration vs Time

```julia
@df pk_data_plot plot(:time, :dv_rec, group=:id, color=:Group, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (mg/L)",
                      guidefontsize = 12, size = (600, 600),
                      title = "Receptor Concentrations vs Time")
```

 * Plot of Complex Concentration vs Time

```julia
@df pk_data_plot plot(:time, :dv_com, group=:id, color=:Group, yaxis=:log, label=false,
                      xlabel="Time (hrs)", ylabel="Concentration (mg/L)",
                      guidefontsize = 12, size = (600, 600),
                      title = "Complex Concentrations vs Time")
```

## NCA Analysis

We will now perform an NCA Analysis to get initial estimates of the data for the
 fitting of the given data. We will include a `route` column to specify that dosing
 is an intravenous bolus `iv`. The *read_nca()* function input requires the route
 to be stated as `iv` for an intravenous bolus, this will help to compute the
 parameters correctly.

We will perform NCA only on Group 4 subjects (Dose 45 mg/kg) to get the initial
 estimates for fitting of the data.

```julia, results="hidden"
pk27_nca_df = filter(x -> x.Group == 4, pk27_data_df)
pk27_nca_df[:, :route] .= "iv"
```

Now, map the data variables to the *read_nca* function that prepares the data for
 NCA analysis. You can even type **?read_nca** in the REPL and get more information
 on the mapping of the data.

```julia
pk27_nca = read_nca(pk27_nca_df,
                    id       = :id,
                    time     = :time,
                    amt      = :amt,
                    conc     = :dv_cp,
                    route    = :route)
```

A `full NCAReport` is generated, we will then perform summary statistics of the
 required parameters to obtain the **Mean, GeometricMean, and SD**

```julia
pk27_nca_report = NCAReport(pk27_nca, sigdig=3)
```

Perform the Summary `Statistics` for the required NCA Parameters.

```julia
## Select the required parameters from the NCA Report
stats_nca_df = select(pk27_nca_report, [:id, :vz_obs, :cl_obs, :aucinf_obs, :kel, :half_life, :cmax])

## Stack the data for easy computation
stats_nca_stacked = stack(stats_nca_df, [:vz_obs, :cl_obs, :aucinf_obs, :kel, :half_life, :cmax], [:id])
stats_nca_summary = combine(groupby(stats_nca_stacked,[:variable]),
                            [col => fun for col in [:value]
                            for fun in [mean, geomean, std]])
```

## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

We will read the dataset into Pumas. We will the observed data of the _ligand,_
 _receptor and complex_.

```julia
pk27_data = read_pumas(pk27_data_df,
                        id           = :id,
                        time         = :time,
                        observations = [:dv_cp, :dv_rec, :dv_com],
                        amt          = :amt,
                        evid         = :evid,
                        cmt          = :cmt,
                        covariates   = [:Group])
```

##### Full Target Mediated Drug Disposition Model

```julia
pk_27_full      = @model begin
  @param begin
    tvcl        ∈ RealDomain(lower=0, upper=1)
    tvkon       ∈ RealDomain(lower=0, upper=1)
    tvkoff      ∈ RealDomain(lower=0, upper=1)
    tvvp        ∈ RealDomain(lower=0, upper=1)
    tvq         ∈ RealDomain(lower=0, upper=1)
    tvkin       ∈ RealDomain(lower=0, upper=1)
    tvkout      ∈ RealDomain(lower=0, upper=1)
    tvkerl      ∈ RealDomain(lower=0, upper=1)
    Ω           ∈ PDiagDomain(5)
    σ²_prop_cp  ∈ RealDomain(lower=0)
    σ²_prop_rec ∈ RealDomain(lower=0)
    σ²_prop_com ∈ RealDomain(lower=0)
  end

  @random begin
    η           ~ MvNormal(Ω)
  end

  @pre begin
    Cl          = tvcl * exp(η[1])
    Kon         = tvkon * exp(η[2])
    Koff        = tvkoff
    Vp          = tvvp * exp(η[3])
    Q           = tvq
    Kin         = tvkin * exp(η[4])
    Kout        = tvkout * exp(η[5])
    Kerl        = tvkerl
    Vc          = 0.05
    bioav       = (Central = 1/Vc,)
  end

  @init begin
    Receptor    = Kin/Kout
  end

  @dynamics begin
    Central'    = -(Cl/Vc)*Central - (Q/Vc)*Central + (Q/Vp)*Peripheral - Kon*Receptor*Central + Koff*Complex
    Peripheral' = (Q/Vc)*Central - (Q/Vp)*Peripheral
    Receptor'   = Kin - Kout*Receptor - Kon*Receptor*Central + Koff*Complex
    Complex'    = Kon*Receptor*Central - Koff*Complex - Kerl*Complex
  end

  @derived begin
    cp          = @. Central
    dv_cp       = @. Normal(cp, sqrt(cp^2*σ²_prop_cp))
    rec         = @. Receptor
    dv_rec      = @. Normal(rec, sqrt(rec^2*σ²_prop_rec))
    com         = @. Complex
    dv_com      = @. Normal(com, sqrt(com^2*σ²_prop_com))
  end
end
```

We have obatined a few intial estimates from the `NCA Analysis`.

```julia
param_est = ( tvcl        = 0.0008,
              tvkon       = 0.10,
              tvkoff      = 0.0005,
              tvvp        = 0.1,
              tvq         = 0.005,
              tvkin       = 0.11,
              tvkout      = 0.01,
              tvkerl      = 0.006,
              Ω           = Diagonal([0.09,0.04,0.02,0.02,0.02]),
              σ²_prop_cp  = 0.02,
              σ²_prop_rec = 0.02,
              σ²_prop_com = 0.02)
```

##### NaivePooled Analysis

A quick estimation of the mean parameters can be done by performing a NaivePooled
 Analysis. This will give us a good judgemnt of the parameters obtained and provide
 better inital estimates for the fitting.

```julia
pk_27_fit_nv = @time fit(pk_27_full, pk27_data, param_est,
                         Pumas.NaivePooled(), ensemblealg=EnsembleThreads(),
                         omegas=(:Ω,))

coeftable(pk_27_fit_nv)
```

We will now fit the data using `FOCEI` to obatin the Between Subject Variability
 (BSV).

```julia
pk_27_fit = @time fit(pk_27_full, pk27_data, param_est,
                        Pumas.FOCEI(), ensemblealg=EnsembleThreads())

coeftable(pk_27_fit)
```

We will obtain the `precision` of the parameters

```julia
pk_27_infer = coeftable(infer(pk_27_fit))
```

We will `inspect` the diagnostics of the model before we go for the goodness of
 fit plots.

```julia
pk_27_inspect = inspect(pk_27_fit) |> DataFrame
```

## Diagnostic Plots

##### Goodness of Fit Plots

 **Plasma Concentration**

```julia
theme(:wong2)

function gof_plasma(pktvp_mr_inspect_run2)
  p1 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
      p1,
      :dv_cp_pred, :dv_cp;
      ylabel = "Observed Plasma Conc (mg/L)",
      xlabel = "Population Predicted (mg/L)",
      label = "",
      legend=false,
  )
  Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

  #
  p2 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p2,
    :dv_cp_ipred, :dv_cp;
    ylabel = "Observed Plasma Conc (mg/L)",
    xlabel = "Individual Predicted (mg/L)",
    label = "",
    legend=false,
  )
  Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

  p3 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p3,
    :time, :dv_cp_wres;
    xlabel = "Time (hr)",
    ylabel = "Conditional Weighted Residuals",
     legend=false
  )
  Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

  p4 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
   p4,
   :dv_cp_pred, :dv_cp_wres,
   xlabel = "Population Predicted (mg/L)",
   ylabel = "Conditional Weighted Residuals",
   legend=false
  )
  Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

  return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof_plasma(pk_27_inspect)
```

**Receptor Concentration**

```julia
function gof_receptor(pktvp_mr_inspect_run2)
 p1 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
     p1,
     :dv_rec_pred, :dv_rec;
     ylabel = "Observed Receptor Conc (mg/L)",
     xlabel = "Population Predicted (mg/L)",
     label = "",
     legend=false,
 )
 Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

 #
 p2 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
   p2,
   :dv_rec_ipred, :dv_rec;
   ylabel = "Observed Receptor Conc (mg/L)",
   xlabel = "Individual Predicted (mg/L)",
   label = "",
   legend=false,
 )
 Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

 p3 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
   p3,
   :time, :dv_rec_wres;
   xlabel = "Time (hr)",
   ylabel = "Conditional Weighted Residuals",
    legend=false
 )
 Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

 p4 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
  p4,
  :dv_rec_pred, :dv_rec_wres,
  xlabel = "Population Predicted (mg/L)",
  ylabel = "Conditional Weighted Residuals",
  legend=false
 )
 Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

 return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof_receptor(pk_27_inspect)
```

**Complex Concentration**

```julia
function gof_complex(pktvp_mr_inspect_run2)
 p1 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
     p1,
     :dv_com_pred, :dv_com;
     ylabel = "Observed Complex Conc (mg/L)",
     xlabel = "Population Predicted (mg/L)",
     label = "",
     legend=false,
 )
 Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

 #
 p2 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
   p2,
   :dv_com_ipred, :dv_com;
   ylabel = "Observed Complex Conc (mg/L)",
   xlabel = "Individual Predicted (mg/L)",
   label = "",
   legend=false,
 )
 Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

 p3 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
   p3,
   :time, :dv_com_wres;
   xlabel = "Time (hr)",
   ylabel = "Conditional Weighted Residuals",
    legend=false
 )
 Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

 p4 = plot()
 @df pktvp_mr_inspect_run2 scatter!(
  p4,
  :dv_com_pred, :dv_com_wres,
  xlabel = "Population Predicted (mg/L)",
  ylabel = "Conditional Weighted Residuals",
  legend=false
 )
 Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

 return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof_complex(pk_27_inspect)
```

##### η-Distribution

```julia
data27_etacov = select(pk_27_inspect,["η_1", "η_2", "η_3", "η_4", "η_5"])
data27_etacov = stack(data27_etacov, ["η_1", "η_2", "η_3", "η_4", "η_5"])
data27_etacov[!,:variable] .= string.(data27_etacov.variable)
@df data27_etacov groupedviolin(:variable,:value,
                               alpha =0.5, legend=false)
@df data27_etacov groupedboxplot!(:variable,:value,
                               alpha =0.5, label ="")
Plots.abline!(0,0, linewidth=4, color = "black",
              size = (800, 800),
              xlabel = "η's", ylabel = "η_values",
              guidefontsize = 22,
              tickfontsize =14, label ="")
```

## Validation

We will perform a validation of the final model using a `Visual Predictive Check`.

 **Plasma Concentration**

```julia
pk_vpc_cp = vpc(pk_27_fit, 200; dv=:dv_cp,
                stratify_by=[:Group],
                ensemblealg=EnsembleSerial())

plot(pk_vpc_cp,
    size=(1000,1000), xlabel="Time after dose (hr)",
    ylabel = "Plasma Concentration (mg/L)" ,
    titlefontsize=20,guidefontsize=20, yaxis=:log,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=true, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth = 5,
    xtickfont = font(20),
    ytickfont = font(20))
```

 **Receptor Concentration**

```julia
pk_vpc_rec = vpc(pk_27_fit, 200; dv=:dv_rec,
                 stratify_by=[:Group],
                 ensemblealg=EnsembleSerial())

plot(pk_vpc_rec,
    size=(1000,1000), xlabel="Time after dose (hr)",
    ylabel = "Receptor Concentration (mg/L)" ,
    titlefontsize=20,guidefontsize=20, yaxis=:log,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=:bottomright, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth = 5,
    xtickfont = font(20),
    ytickfont = font(20))
```

 **Complex Concentration**

```julia
pk_vpc_com = vpc(pk_27_fit, 200; dv=:dv_com,
                 stratify_by=[:Group],
                 ensemblealg=EnsembleSerial())

plot(pk_vpc_com,
    size=(1000,1000), xlabel="Time after dose (hr)",
    ylabel = "Complex Concentration (mg/L)" ,
    titlefontsize=20,guidefontsize=20, yaxis=:log,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=:bottomright, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth = 5,
    xtickfont = font(20),
    ytickfont = font(20))
```

##### Michaelis-Menten Model (Reduced Model)

```julia
pk27_data_red = read_pumas(pk27_data_df,
                            id           = :id,
                            time         = :time,
                            observations = [:dv_cp],
                            amt          = :amt,
                            evid         = :evid,
                            cmt          = :cmt,
                            covariates   = [:Group])
```

##### Two-compartment model with Parallel First-order and Nonlinear Elimination

```julia
pk_27_reduced   = @model begin
  @param begin
    tvvmax      ∈ RealDomain(lower=0)
    tvkm        ∈ RealDomain(lower=0)
    tvvp        ∈ RealDomain(lower=0)
    tvvc        ∈ RealDomain(lower=0)
    tvq         ∈ RealDomain(lower=0)
    tvcll       ∈ RealDomain(lower=0)
    Ω           ∈ PDiagDomain(2)
    σ           ∈ RealDomain(lower=0)
  end

  @random begin
    η           ~ MvNormal(Ω)
  end

  @pre begin
    Vmax        = tvvmax * exp(η[1])
    Km          = tvkm
    Vp          = tvvp * exp(η[2])
    Vc          = tvvc
    Q           = tvq
    CLl         = tvcll           # Linear clearance
   #CLmm        = Vmax/(Km+C)     # Non-linear clearance
  end

  @dynamics begin
    Central'    = -(Vmax/(Km+(Central/Vc)))*(Central/Vc) - CLl*(Central/Vc)-(Q/Vc)*Central +(Q/Vp)*Peripheral
    Peripheral' = (Q/Vc)*Central -(Q/Vp)*Peripheral
  end

  @derived begin
    cp          = @. Central/Vc
    dv_cp       ~ @. Normal(cp, sqrt(cp^2*σ))
  end
end
```

We have obatined the initial estimates from the literature

```julia
param_est_red = ( tvvmax  = 0.0146,
                  tvkm    = 3.7,
                  tvvp    = 0.0293,
                  tvvc    = 0.05,
                  tvq     = 0.003,
                  tvcll   = 0.00090,
                  Ω       = Diagonal([0.02,0.02]),
                  σ       = 0.02)
```

##### NaivePooled Analysis

A quick estimation of the mean parameters can be done by performing a NaivePooled
 Analysis. This will give us a good judgemnt of the initial parameters and provide
 better inital estimates for the fitting.

```julia
pk_27_red_fit_nv = @time fit(pk_27_reduced, pk27_data_red, param_est_red,
                              Pumas.NaivePooled(), ensemblealg=EnsembleThreads(),
                              omegas=(:Ω,))

coeftable(pk_27_red_fit_nv)
```

We will now fit the data using `FOCEI` to obatin the Between Subject Variability
 (BSV).

```julia
pk_27_red_fit = @time fit(pk_27_reduced, pk27_data_red, param_est_red,
                          Pumas.FOCEI(), ensemblealg=EnsembleThreads())

coeftable(pk_27_red_fit)
```

We will obtain the `precision` of the parameters

```julia
pk_27_red_infer = coeftable(infer(pk_27_red_fit))
```

We will `inspect` the diagnostics of the model before we go for the goodness of
 fit plots.

```julia
pk_27_red_inspect = inspect(pk_27_red_fit) |> DataFrame
```

##### Goodness of Fit Plots

```julia
gof_plasma(pk_27_red_inspect)
```

## Model Comparison

We will compare other metrics and statistics, such as `aic` and `bic`. The aic
 and bic values are **lower for the full TMDD model** which indicates a better
 fit of the given data.

```julia
DataFrame([(metric=string(f), fit_full_model=f(pk_27_fit), fit_red_model=f(pk_27_red_fit)) for f in (aic, bic)])
```
