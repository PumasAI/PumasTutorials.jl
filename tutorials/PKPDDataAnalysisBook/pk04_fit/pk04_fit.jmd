---
title: Exercise PK04 - Estimation of One Compartment Oral Dosing
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

For this fitting exercise we wil learn how to fit a first order one-compartment
  absorption model. The challenge in this exercise is that the estimated values of
  rate constants of absorption *Ka* and elimination *K* are almost identical. Thus,
  we use a limited form with Ka = K = K¹. We will try all possible models and compare
  various models based on the diagnostic plots and certain criteria. The basic
  workflow for the estimation process is:

 1. Description of the data
 2. Exploratory analysis of the data
 3. NCA Analysis
 4. Pharmacokinetic modelling
 5. Diagnostic Plots
 6. Validation

Lets load the necessary libraries before we get started

```julia
using Pumas
using PumasTutorials
using Random
using CSV
using Plots
using StatsPlots
using Pipe
using StatsBase
using PrettyTables
```

## Description of the data

A Controlled Release formulation with a dose of 352.3 μg is given orally Q24 hrs
 for 9 days (last dose=216 hrs). A total of 40 patients participated in the study.
 Pk samples are obtaines from the patient on Day 1 - 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 23.9
 & Day 9 - Predose, 216.5, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 230, 240.
 A total of 26 samples are collected from each patient.

The following are the units of the dataset:

 * Time (time) = hrs
 * Plasma Concentration (dv) = μg/L
 * Dose (amt) = mg

```julia
pk04_data_df = CSV.read("/Users/Parsshava/Desktop/Julia/PumasTutorials.jl/tutorials/PKPDDataAnalysisBook/pk04_fit/pk_04.csv",
  DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary statistics of the data

```julia
stats_pk04_data = describe(pk04_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## Exploratory Plots of the given data

Plot of Plasma Concentration vs Time on `Day 9`.

```julia
pk_data_plot = dropmissing(pk04_data_df, :dv)
filter!(x -> x.time >= 216, pk_data_plot)
@df pk_data_plot plot(:time, :dv, group=:id, label=false,
                        xlabel = "Time (hrs)", ylabel="Concentration (ug/L)",
                        size = (600, 600), guidefontsize = 12,
                        title = "Concentration vs Time")
```

## NCA Analysis

We will now perform an NCA analysis to get the initial estimates for fitting of
 the given data. Since the dose is extravascular we will need to include a
 route colum `ev`. This will help to compute the correct parameters. We will perform
 the NCA for Day 9 (steady state) PK samples. The concentrations are in μg/L and
 the dose is in μg, so we can parse the data to the *read_nca* function.

```julia, results="hidden"
pk04_data_nca = filter(x -> x.time >= 216, pk04_data_df)
pk04_data_nca[:, :route] .= "ev"
```

Now, map the data variables to the *read_nca* function that prepares the data for
 NCA analysis. You can even type **?read_nca** in the REPL and get more information
 on the mapping of the variables.

```julia
pk04_nca = read_nca(pk04_data_nca,
                    id     = :id,
                    time   = :time,
                    amt    = :amt,
                    conc   = :dv,
                    route  = :route)
```

A full NCAReport is generated, we will then perform summary statistics of the
 required parameters to obtain the Mean, GeometricMean, and SD.

```julia
pk04_nca_report = NCAReport(pk04_nca, sigdig=3)
```

Perform the `Summary Statistics` for the required NCA Parameters

```julia
## Select the required parameters from the NCA Report
stats_nca_df = select(pk04_nca_report, [:id, :vz_f_obs, :cl_f_obs, :kel, :half_life, :aucinf_obs, :tmax, :tlag])

## Stack the data for easy computation
stats_nca_stacked = stack(stats_nca_df, [:vz_f_obs, :cl_f_obs, :kel, :half_life, :aucinf_obs, :tmax, :tlag], [:id])
stats_nca_summary = combine(groupby(stats_nca_stacked,[:variable]),
                            [col => fun for col in [:value]
                            for fun in [mean, geomean, std]])
```

We can obtain the Ka value from 0.693/(tmax/4) i.e **Ka = 0.42 hr⁻¹**

## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

First we will try to fit the data to a first-order absorption model.

```julia
pk04_data = read_pumas(pk04_data_df,
                       id           = :id,
                       time         = :time,
                       observations = [:dv],
                       amt          = :amt,
                       evid         = :evid,
                       cmt          = :cmt,
                       rate         = :rate)
```

##### First-order Absorption Model

In this model the parameters are *Ka and K*

```julia
pk_04_kak    = @model begin
  @param begin
    tvka     ∈ RealDomain(lower=0, upper=10)
    tvvc     ∈ RealDomain(lower=0, upper=200)
    tvk      ∈ RealDomain(lower=0, upper=10)
    tvtlag   ∈ RealDomain(lower=0, upper=5)
    Ω        ∈ PDiagDomain(1)
    σ²_prop  ∈ RealDomain(lower=0)
  end

  @random begin
    η        ~ MvNormal(Ω)
  end

  @pre begin
    Ka       = tvka
    Vc       = tvvc * exp(η[1])
    K        = tvk
    lags     = (Depot = tvtlag,)
  end

  @dynamics begin
    Depot'   = -Ka*Depot
    Central' =  Ka*Depot - K*Central
  end

  @derived begin
    cp       = @. Central/Vc
    dv       ~ @. Normal(cp, sqrt(cp^2*σ²_prop))
  end
end
```

The initial parameters are obtained from NCA analysis.

```julia
pk04_param_kak = (tvka    = 0.4,
                  tvvc    = 69,
                  tvk     = 0.09,
                  tvtlag  = 0.5,
                  Ω       = Diagonal([0.02]),
                  σ²_prop = 0.02)
```

## Naive Pooled

A quick estimation of the mean parameters can be done by performing a NaivePooled
 Analysis. This will give us a good judgemnt of the parameters obtained from NCA
 Analysis and provide better inital estimates for the fitting.

```julia
pk04_kak_fit_nv = @time fit(pk_04_kak, pk04_data, pk04_param_kak,
                            Pumas.NaivePooled(), ensemlblealg=EnsembleThreads(),
                            omegas=(:Ω,),
                            constantcoef=(tvtlag=0.0001,))

coeftable(pk04_kak_fit_nv)
```

The results of the NaivePooled estimates match closely to our initial estimates
 from NCA analysis. We can see that the Ka and K parameters are not distinctly identified.

## FOCEI

We will now use the mean estimates from the NaivePooled Analysis for fitting the
 data and obatining the Between Subject Variability (BSV) on the parameters.

```julia
pk04_param_kak_focei = (tvka    = 0.14,
                        tvvc    = 56,
                        tvk     = 0.14,
                        tvtlag  = 0.5,
                        Ω       = Diagonal([0.02]),
                        σ²_prop = 0.02)

pk04_kak_fit_focei = @time fit(pk_04_kak, pk04_data, pk04_param_kak_focei,
                               Pumas.FOCEI(), ensemlblealg=EnsembleThreads(),
                               constantcoef=(tvtlag=0.0001,))

coeftable(pk04_kak_fit_focei)
```

We will now fit the data estimating the `lag` parameter.

```julia
pk04_kak_lag_fit_focei = @time fit(pk_04_kak, pk04_data, pk04_param_kak,
                            Pumas.FOCEI(), ensemlblealg=EnsembleThreads())

coeftable(pk04_kak_lag_fit_focei)
```

We will generate a few goodness of fit plots to compare which model is performing
 better. We will first inspect the diagnostics of our models.

```julia, results="hidden"
pk04_kak_inspect_focei     = inspect(pk04_kak_fit_focei) |> DataFrame
pk04_kak_lag_inspect_focei = inspect(pk04_kak_lag_fit_focei) |> DataFrame
```

## Diagnostic Plots

##### Goodness of Fit Plots for the First-order Absorption Model

**Without Lag time**

```julia
theme(:wong2)

function gof(pktvp_mr_inspect_run2)
  p1 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
      p1,
      :dv_pred, :dv;
      ylabel = "Observed dv (ug/L)",
      xlabel = "Population Predicted (ug/L)",
      label = "",
      legend=false,
  )
  Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

  #
  p2 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p2,
    :dv_ipred, :dv;
    ylabel = "Observed dv (ug/L)",
    xlabel = "Individual Predicted (ug/L)",
    label = "",
    legend=false,
  )
  Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

  p3 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p3,
    :time, :dv_wres;
    xlabel = "Time (hr)",
    ylabel = "Conditional Weighted Residuals",
     legend=false
  )
  Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

  p4 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
   p4,
   :dv_pred, :dv_wres,
   xlabel = "Population Predicted (ug/L)",
   ylabel = "Conditional Weighted Residuals",
   legend=false
  )
  Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

  return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof(pk04_kak_inspect_focei)
```

**With Lag time**

```julia
gof(pk04_kak_lag_inspect_focei)
```

We will compare the AIC and BIC values of both the models and decide which way to
 go further.

```julia
DataFrame([(metric=string(f), fit_kak_lag=f(pk04_kak_lag_fit_focei), fit_kak_nolag=f(pk04_kak_fit_focei)) for f in (aic, bic)])
```

We can see clearly that the model **with lag time** is a better fit to the data. The
 parameters of Ka and K are not distinctly identified. Hence we will reduce the
 model Ka = K = K¹.

```julia
pk_04_kk     = @model begin
  @param begin
    tvk¹     ∈ RealDomain(lower=0, upper=10)
    tvvc     ∈ RealDomain(lower=0, upper=200)
    tvlag    ∈ RealDomain(lower=0, upper=5)
    Ω        ∈ PDiagDomain(1)
    σ²_prop  ∈ RealDomain(lower=0)
  end

  @random begin
    η        ~ MvNormal(Ω)
  end

  @pre begin
    K¹       = tvk¹
    Vc       = tvvc * exp(η[1])
    lags     = (Depot = tvlag,)
  end

  @dynamics begin
    Depot'   = -K¹*Depot
    Central' =  K¹*Depot - K¹*Central
  end

  @derived begin
    cp       = @. Central/Vc
    dv       ~ @. Normal(cp, sqrt(cp^2*σ²_prop))
  end
end
```

The initial parameters obtained from the previous runs have been used.

```julia
pk04_param_kk = (tvk¹    = 0.15,
                 tvvc    = 48,
                 tvlag   = 0.6,
                 Ω       = Diagonal([0.02]),
                 σ²_prop = 0.02)
```

We have dropped the η on K¹ since it not estimated with good precision.

```julia
pk04_kk_lag_fit_focei = @time fit(pk_04_kk, pk04_data, pk04_param_kk,
                                  Pumas.FOCEI(), ensemlblealg=EnsembleThreads())

coeftable(pk04_kk_lag_fit_focei)
```

We will now obtain the parameter precision of the model.

```julia
pk04_kk_lag_infer_focei = coeftable(infer(pk04_kk_lag_fit_focei))
```

We will first inspect the diagnostics of the models.

```julia
pk04_kk_lag_inspect_focei = inspect(pk04_kk_lag_fit_focei) |> DataFrame
```

Goodness of fit plot for the Ka=K=K¹ model.

```julia
gof(pk04_kk_lag_inspect_focei)
```

We will compare other metrics and statistics, such as aic and bic. The aic
 and bic values are lower for the K¹ model which indicates a better fit of the model.

```julia
DataFrame([(metric=string(f), fit_k¹_lag=f(pk04_kk_lag_fit_focei), fit_kak_lag=f(pk04_kak_lag_fit_focei)) for f in (aic, bic)])
```

## Validation

We will perform a validation of the final model using VPC check.

```julia, eval=false
pk_vpc = vpc(pk04_kk_lag_fit_focei, 200; dv=:dv, bandwidth=2,
             ensemblealg=EnsembleSerial())

plot(pk_vpc,
    size=(800,800), xlabel="Time after dose (hours)",
    ylabel = "Concentration (ug/L)" ,
    titlefontsize=20,guidefontsize=20,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=true, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth =5,
    xlims=(0,24),
    xticks=[0,24,48,72,96,120,144,168,192,216,240],
     xtickfont = font(20),
     ytickfont = font(20))
```
