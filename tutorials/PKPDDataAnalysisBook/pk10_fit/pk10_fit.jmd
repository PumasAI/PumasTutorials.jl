---
title: Exercise PK10 - Simultaneous Estimation of IV/PO data
date: `j Date(now())`
---

## Objectives:

 * For this fitting exercise we will learn how to analyze intravascular (IV)
   and extravascular (Oral) data and then simultaneously fit both IV and Oral data.
   The main goal is that all possible sources of data should be included, this
   helps to increase precision of parameters and avoids bias.

The basic workflow of the estimation process is

 1. Description of the data
 2. Exploratory analysis of the data
 3. NCA Analysis
 4. Pharmacokinetic modelling
 5. Diagnostic Plots
 6. Validation

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using Plots
using StatsPlots
using Pipe
using StatsBase
```

## Description of the data

 * The given dataset contains pk samples collected at two occasions from a total of **50 patients**.
 * Each patient is administered an IV dose of **100 mg** on occasion = 1 and a oral dose of
   **500 mg** on occasion = 2.

The following are the units of the dataset:

 * Time (time) = minutes
 * Concentration (dv) = mg/L
 * Dose (amt) = mg
 * Occasion = 1: Intravenous Dose, 2:Oral Dose

```julia
pk10_data_df = CSV.read("/Users/Parsshava/Desktop/Julia/PumasTutorials.jl/tutorials/PKPDDataAnalysisBook/pk10_fit/pk_10.csv",
 DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary statistics of the data

```julia
stats_pk10_data = describe(pk10_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## Exploratory Plots of the given data

##### IV data

Filter only the `IV` data and plot the **Concentration vs Time**

```julia
pk10_data_iv = filter(x -> x.route == "IV", pk10_data_df)
@df pk10_data_iv plot(:time, :dv, group=:id, yaxis=:log, label=false,
                        xlabel="Time (min)", ylabel="Concentration (mg/L)",
                        xticks=[0,30,60,90,120,150,180,210,240,270,300,330,360],
                        size = (600, 600), guidefontsize = 12,
                        title = "IV Dosing, Concentrations vs Time")
```

##### Oral data

Filter only the `Oral` data and plot the **Concentration vs Time**

```julia
pk10_data_oral = filter(x -> x.route == "ORAL", pk10_data_df)
@df pk10_data_oral plot(:time, :dv, group=:id, label=false,
                        xlabel="Time (min)", ylabel="Concentration (mg/L)",
                        xticks=[0,30,60,90,120,150,180,210,240,270,300,330,360],
                        size = (600, 600), guidefontsize = 12,
                        title = "Oral Dosing, Concentrations vs Time")
```

## NCA Analysis

We will now perform an NCA analysis to get the initial estimates for the fitting
 of the given data. The route column will need to be slightly modified to indicate
 if it is extravascular `ev` or intravenous `iv`. The read_nca() function input requires
 the route to be stated as either *ev* for extravascular or *iv* for intravenous.

```julia; results = "hidden"
pk10_data_df[:route] = ifelse.(pk10_data_df.route .== "IV", "iv", "ev")
```

Now, map the data variables to the `read_nca` function that prepares the data for NCA analysis.

```julia
pk10_nca = read_nca(pk10_data_df,
                    id     = :id,
                    time   = :time,
                    amt    = :amt,
                    conc   = :dv,
                    route  = :route,
                    group  = [:occasion])
```

A full `NCAReport` is generated, we will then perform summary statistics of the
 required parameters to obtain the **Mean**, **GeometricMean**, and **SD**

```julia
pk10_nca_report = NCAReport(pk10_nca, sigdig=3)
```

Perform the `Summary Statistics` for the required NCA Parameters

```julia
## Select the required parameters from the NCA Report
stats_nca_df = select(pk10_nca_report, [:id, :vz_obs, :cl_obs, :vz_f_obs, :cl_f_obs, :tmax, :tlag, :occasion])

## Stack the data for easy computation
stats_nca_stacked = stack(stats_nca_df, [:vz_obs, :cl_obs,  :vz_f_obs, :cl_f_obs, :tmax, :tlag,], [:id, :occasion])
stats_nca_summary = combine(groupby(stats_nca_stacked,[:occasion, :variable]),
                            [col => fun for col in [:value]
                            for fun in [mean, geomean, std]])
sort!(stats_nca_summary, [:occasion])
dropmissing!(stats_nca_summary, :value_mean)
```

We have obtained the mean `NCA Statistics` for a few parameters and the others
 can be calculated as below:

 * Obtain the `F` value (vz_obs/vz_f_obs) i.e **F = 0.32**
 * Obtain the `Ka` value from 0.693/(*tmax*/4) i.e **Ka = 0.064**


## Read the dataset into read_pumas()

All `0` concentrations in the dataset need to be set to `missing`, then parse the dataset to read_pumas().

```julia
dose = filter(x -> x.evid in [1,4], pk10_data_df)

obs = filter(x -> x.evid in [0], pk10_data_df)
obs[:dv] = ifelse.(obs.dv .== 0, missing, obs.dv)

pk10_data_df = sort(vcat(dose, obs), [:id, :occasion, order(:evid, rev=true)])

pk_data_iv_oral = read_pumas(pk10_data_df,
                             id           = :id,
                             time         = :time,
                             observations = [:dv],
                             amt          = :amt,
                             evid         = :evid,
                             cmt          = :cmt)
```

## Two Compartment Model with a Lag Time

The given model we have chosen is a two compartment model since the drug follows
 a two compartmental kinetics. We will test both the absorption of the drug
 both *with a lagtime* and *without a lagtime*

```julia
pk_10           = @model begin
  @param begin
    tvvc        ∈ RealDomain(lower=0, upper=200)
    tvvp        ∈ RealDomain(lower=0, upper=200)
    tvq         ∈ RealDomain(lower=0, upper=20)
    tvcl        ∈ RealDomain(lower=0, upper=20)
    tvka        ∈ RealDomain(lower=0, upper=10)
    tvfa        ∈ RealDomain(lower=0, upper=5)
    tvlag       ∈ RealDomain(lower=0, upper=50)
    Ω           ∈ PDiagDomain(7)
    σ²_prop     ∈ RealDomain(lower=0)
  end

  @random begin
    η           ~ MvNormal(Ω)
  end

  @pre begin
    Vc          = tvvc * exp(η[1])
    Vp          = tvvp * exp(η[2])
    Q           = tvq * exp(η[3])
    CL          = tvcl * exp(η[4])
    Ka          = tvka * exp(η[5])
    bioav       = (Depot=tvfa * exp(η[6]),)
    lags        = (Depot=tvlag * exp(η[7]),)
  end

  @dynamics Depots1Central1Periph1
    #Depot'      = -Ka*Depot
    #Central'    =  Ka*Depot + (Q/Vp)*Peripheral - (Q/Vc)*Central - (CL/Vc)*Central
    #Peripheral' =  (Q/Vc)*Central - (Q/Vp)*Peripheral
  #end

  @derived begin
    cp          = @. Central/Vc
    dv          ~ @. Normal(cp, sqrt(cp^2*σ²_prop))
  end
end
```

Initial Parameters for IV and Oral Dosing at separate occasions obatined from
 NCA analysis. The Volume of distribution = 147 mg/L obtained from NCA analysis
 is split between the two compartments.

```julia
param_est = ( tvvc    = 73.5,
              tvvp    = 73.5,
              tvq     = 0.96,
              tvcl    = 0.96,
              tvka    = 0.06,
              tvfa    = 0.33,
              tvlag   = 12.8,
              Ω       = Diagonal([0.04,0.04,0.04,0.04,0.04,0.04,0.04]),
              σ²_prop = 0.01)
```

Before we start with fitting the data, we will `simulate` the data with the initial
 estimates of the parameters we have obtained from the NCA analysis. This will
 help us to evaluate the appropiatness of the `model`.

```julia
simpk_iv    = simobs(pk_10, pk_data_iv_oral, param_est, obstimes=[5,10,15,20,30,45,60,90,120,150,180,240,300,359.99])
simpk_iv_df = DataFrame(simpk_iv)

@df simpk_iv_df plot(:time, :dv, group=:id, yaxis=:log,
                     xlabel = "Time (mins)", ylabel = "Concentration (mg/L)",
                     title = "IV Dosing, Concentration vs Time",
                     size = (600, 600), guidefontsize = 12,
                     label = "", alpha=0.1)
@df pk10_data_iv scatter!(:time, :dv, alpha=0.5, yaxis = :log,
                          label = "Observed concentrations", legend=false)
```

```julia
time_oral     = (360 .+ [5,10,15,20,30,45,60,90,120,150,180,240,300,360.1])
simpk_oral    = simobs(pk_10, pk_data_iv_oral, param_est, obstimes=time_oral)
simpk_oral_df = DataFrame(simpk_oral)
simpk_oral_df[:time] = simpk_oral_df.time .- 360

@df simpk_oral_df plot(:time, :dv, group=:id,
                     xlabel = "Time (mins)", ylabel = "Concentration (mg/L)",
                     title = "Oral Dosing, Concentration vs Time",
                     size = (600, 600), guidefontsize = 12,
                     xlims=(0,362), legend=false, alpha=0.1)
@df pk10_data_oral scatter!(:time, :dv, alpha=0.5)
```

##### NaivePooled Analysis

A quick estimation of the mean parameters can be done by performing a  `NaivePooled`
 Analysis. This will give us a good judgemnt of the parameters obtained from
 NCA Analysis and provide better inital estimates for the fitting.

```julia
pk_10_fit_nv = @time fit(pk_10, pk_data_iv_oral, param_est,
                    Pumas.NaivePooled(), ensemblealg=EnsembleThreads(),
                    omegas=(:Ω,))

coeftable(pk_10_fit_nv)
```

The results of the NaivePooled estimates match closely to our initial estimates
 from NCA analysis. We will now use the mean estimates from the NaivePooled Analysis
 for fitting the data and obatining the `Between Subject Variability` on the parameters.


```julia
param_est_focei = ( tvvc    = 61,
                    tvvp    = 62,
                    tvq     = 1.3,
                    tvcl    = 0.9,
                    tvka    = 0.04,
                    tvfa    = 0.33,
                    tvlag   = 12.3,
                    Ω       = Diagonal([0.04,0.04,0.04,0.04,0.04,0.04,0.04]),
                    σ²_prop = 0.06)
```

We have fixed the `tvlag` parameter to 0.0001.

```julia
pk_10_fit_nolag = @time fit(pk_10, pk_data_iv_oral, param_est_focei,
                            Pumas.FOCEI(), ensemblealg=EnsembleThreads(),
                            constantcoef=(tvlag=0.0001,))

coeftable(pk_10_fit_nolag)
```

We will now evaluate the same model without fixing the `tvlag`

```julia
pk_10_fit_lag = @time fit(pk_10, pk_data_iv_oral, param_est_focei,
                            Pumas.FOCEI(), ensemblealg=EnsembleThreads())

coeftable(pk_10_fit_lag)
```

We will now obtain the parameter precision of the `lag` model.

```julia
pk_10_infer_lag = coeftable(infer(pk_10_fit_lag))
```

Lets compare the estimates for the two models `with-lag` and `without lag`.

```julia
@pipe leftjoin(coeftable(pk_10_fit_nolag),
               coeftable(pk_10_fit_lag), on = :parameter, makeunique = true) |>
  rename!(_, :estimate => :pk_10_no_lagmodel, :estimate_1 => :pk_10_lagmodel)
```

We will perform a likelihood ratio test to compare the two nested model. From the P-value
it is clear the model with a lag-compartment is a better fit.

```julia
lrtest(pk_10_fit_nolag, pk_10_fit_lag)
```

We will compare the other metrics and statistics, such as aic and bic.

```julia
DataFrame([(metric=string(f), fit_nolag=f(pk_10_fit_nolag), fit_lag=f(pk_10_fit_lag)) for f in (aic, bic)])
```

## Diagnostic Plots

##### Goodness of Fit Plots

We will generate a few goodness of fit plots to compare which model is performing
 better. We will first `inspect` the diagnostics of our models.

```julia; results="hidden"
pk_10_inspect_nolag = inspect(pk_10_fit_nolag) |> DataFrame
pk_10_inspect_lag   = inspect(pk_10_fit_lag) |> DataFrame
```

```julia
theme(:wong2)

function gof(pk_10_inspect_nolag)
  p1 = plot()
  @df pk_10_inspect_nolag scatter!(
      p1,
      :dv_pred, :dv;
      ylabel = "Observed dv (ug/L)",
      xlabel = "Population Predicted (ug/L)",
      label = "",
      legend=false,
  )
  Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

  #
  p2 = plot()
  @df pk_10_inspect_nolag scatter!(
    p2,
    :dv_ipred, :dv;
    ylabel = "Observed dv (ug/L)",
    xlabel = "Individual Predicted (ug/L)",
    label = "",
    legend=false,
  )
  Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

  p3 = plot()
  @df pk_10_inspect_nolag scatter!(
    p3,
    :time, :dv_wres;
    xlabel = "Time (h)",
    ylabel = "Conditional Weighted Residuals",
     legend=false
  )
  Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

  p4 = plot()
  @df pk_10_inspect_nolag scatter!(
   p4,
   :dv_pred, :dv_wres,
   xlabel = "Population Predicted (ug/L)",
   ylabel = "Conditional Weighted Residuals",
   legend=false
  )
  Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

  return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof(pk_10_inspect_nolag)
```

```julia
gof(pk_10_inspect_lag)
```

Clearly the model with a lag compartment is a better fit to the given data.


```julia
data10_etacov = select(pk_10_inspect_lag,["η_1", "η_2", "η_3", "η_4", "η_5", "η_6", "η_7"])
data10_etacov = stack(data10_etacov, ["η_1", "η_2", "η_3", "η_4", "η_5", "η_6", "η_7"])
data10_etacov[!,:variable] .= string.(data10_etacov.variable)
@df data10_etacov groupedviolin(:variable,:value,
                               alpha =0.5, legend=false)
@df data10_etacov groupedboxplot!(:variable,:value,
                               alpha =0.5, label ="")
Plots.abline!(0,0, linewidth=4, color = "black",
              size = (1000, 1000),
              xlabel = "η's", ylabel = "η_values",
              guidefontsize = 22,
              tickfontsize =14, label ="")
```

We will perform a validation of the final model using `VPC` check.

```julia
pk_vpc = vpc(pk_10_fit_lag, 200; dv=:dv,
             ensemblealg=EnsembleThreads())

plot(pk_vpc,
    size=(1000,1000), xlabel="Time after dose (hours)",
    ylabel = "Concentration (mg/L)" ,
    titlefontsize=20,guidefontsize=20,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=true, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth =5,
     xtickfont = font(20),
     ytickfont = font(20))
```
