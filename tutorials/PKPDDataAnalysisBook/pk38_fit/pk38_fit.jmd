---
title : Exercise PK38 - Fitting Invitro/invivo extrapolation II
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

In this exercise we will analyze the _in vitro_ metabolic rate of a compound using
 the differential equation. We will apply nonlinear regression to five different
 starting concentrations. The compound is excreted completely via the hepatic route.
 We will model two different cytochrome P450 isoenzymes for the elimination of the
 compound.

The basic workflow for the estimation process is:

 1. Description of the data
 2. Exploratory analysis of the data
 3. Pharmacokinetic modelling
 4. Diagnostic Plots
 5. Validation

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using Plots
using StatsPlots
using Pipe
using StatsBase
```

## Description of the given data

In this experiment `6 human microsomes` of 5 groups where given different concentrations
 of **50, 30, 10,3 & 5 μmol/L**. The concentrations of the drug where recorded over
 various time points `0.1, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
 15, 16, 17, 18, 19, 20, 23, 27, 28, 29, 30, 31 mins` for the highest concentration.

The following are the units of the dataset:

 * Time (time) = mins
 * Concentration = uM
 * Dose (amt) = μmol/L
 * Group (1 : Dose 50, 2 : Dose 30, 3 : Dose 10, 4 : Dose 3, 5 : Dose 1)

```julia
pk38_data_df = CSV.read("/Users/Parsshava/Desktop/Julia/PumasTutorials.jl/tutorials/PKPDDataAnalysisBook/pk38_fit/pk_38.csv",
    DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary `statistics` of the data

```julia
stats_pk38_data = describe(pk38_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## Exploratory Plots of the given data

 * Plot of Concentration vs Time

```julia
pk_data_plot = dropmissing(pk38_data_df, :dv)
filter!(x -> x.dv > 0, pk_data_plot)
@df pk_data_plot plot(:time, :dv, group=:id, yaxis=:log, color=:Group, label=false,
                      xlabel="Time (mins)", ylabel="Concentration (uM)",
                      size = (600, 500), guidefontsize = 12,
                      title = "Concentration vs Time")
```

## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

```julia
pk38_data = read_pumas(pk38_data_df,
                        id           = :id,
                        time         = :time,
                        amt          = :amt,
                        evid         = :evid,
                        observations = [:dv],
                        cmt          = :cmt,
                        covariates   = [:Group])
```

##### Double-Enzyme NonLinear Elimination Model

The volume of the incubation medium is set to 1ml.

```julia
pk_38        = @model begin
  @param begin
    tvvmax1  ∈ RealDomain(lower=0)
    tvkm1    ∈ RealDomain(lower=0)
    tvvmax2  ∈ RealDomain(lower=0)
    tvkm2    ∈ RealDomain(lower=0)
    Ω        ∈ PDiagDomain(2)
    σ_add    ∈ RealDomain(lower=0)
  end

  @random begin
    η        ~ MvNormal(Ω)
  end

  @pre begin
    Vmax1    = tvvmax1 * exp(η[1])
    Km1      = tvkm1
    Vmax2    = tvvmax2 * exp(η[2])
    Km2      = tvkm2
    Vmedium  = 1
  end

  @vars begin
    VMKM    := ((Vmax1*Central/(Km1+Central))+(Vmax2*Central/(Km2+Central)))
  end

  @dynamics begin
    Central' =  -VMKM/Vmedium
  end

  @derived begin
    cp       = @. Central/Vmedium
    dv       ~ @. Normal(cp, σ_add)
  end
end
```

We will use the `graphical representation` for the initial parameter estimates for
 the fitiing of the given data.

```julia
param_est = ( tvvmax1 = 0.8,
              tvkm1   = 0.1,
              tvvmax2 = 0.8,
              tvkm2   = 10,
              Ω       = Diagonal([0.02,0.02]),
              σ_add   = 0.04)
```

##### NaivePooled Analysis

A quick estimation of the mean parameters can be done by performing a NaivePooled
 Analysis. This will give us a good judgemnt of the parameters obtained graphically
 and provide better inital estimates for the fitting.

```julia
pk_38_fit_nv = @time fit(pk_38, pk38_data, param_est,
                            Pumas.NaivePooled(), ensemblealg=EnsembleThreads(),
                            omegas=(:Ω,))

coeftable(pk_38_fit_nv)
```

We will now fit the data using `FOCEI`

```julia
pk_38_fit = @time fit(pk_38, pk38_data, param_est,
                      Pumas.FOCEI(), ensemblealg=EnsembleThreads())

coeftable(pk_38_fit)
```

We will obtain the `precision` of the parameters

```julia
pk_38_infer = coeftable(infer(pk_38_fit))
```

We will `inspect` the diagnostics of the model before we go for the goodness of fit plots.

```julia
pk_38_inspect = inspect(pk_38_fit) |> DataFrame
```

## Diagnostic Plots

##### Goodness of Fit Plots

```julia
theme(:wong2)

function gof(pktvp_mr_inspect_run2)
  p1 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
      p1,
      :dv_pred, :dv;
      ylabel = "Observed dv (uM)",
      xlabel = "Population Predicted (uM)",
      label = "",
      legend=false,
  )
  Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

  #
  p2 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p2,
    :dv_ipred, :dv;
    ylabel = "Observed Plasma` Conc (uM)",
    xlabel = "Individual Predicted (uM)",
    label = "",
    legend=false,
  )
  Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

  p3 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p3,
    :time, :dv_wres;
    xlabel = "Time (mins)",
    ylabel = "Conditional Weighted Residuals",
     legend=false
  )
  Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

  p4 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
   p4,
   :dv_pred, :dv_wres,
   xlabel = "Population Predicted (uM)",
   ylabel = "Conditional Weighted Residuals",
   legend=false
  )
  Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

  return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof(pk_38_inspect)
```

##### η-Distribution

```julia
data38_etacov = select(pk_38_inspect,["η_1", "η_2"])
data38_etacov = stack(data38_etacov, ["η_1", "η_2"])
data38_etacov[!,:variable] .= string.(data38_etacov.variable)
@df data38_etacov groupedviolin(:variable,:value,
                               alpha =0.5, legend=false)
@df data38_etacov groupedboxplot!(:variable,:value,
                               alpha =0.5, label ="")
Plots.abline!(0,0, linewidth=4, color = "black",
              size = (800, 800),
              xlabel = "η's", ylabel = "η_values",
              guidefontsize = 22,
              tickfontsize =14, label ="")
```

## Validation

We will perform a validation of the final model using a `Visual Predictive Check`.

```julia
pk_vpc = vpc(pk_38_fit, 200; dv=:dv,
             stratify_by=[:Group],
              ensemblealg=EnsembleSerial())

plot(pk_vpc,
    size=(800,800), xlabel="Time after dose (mins)",
    ylabel = "Concentration (uM)" ,
    titlefontsize=20, guidefontsize=20,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=true, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth = 5,
    xtickfont = font(20),
    ytickfont = font(20))
```
