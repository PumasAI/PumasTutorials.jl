---
title : Exercise PK21 - Fitting Nonlinear Kinetics - Heteroinduction
date: `j Date(now())`
---

```julia; echo = false
using Dates
```

## Objectives

In this exercise we will learn how to build a **heteroinduction model** and estimate
 the apparent fractional turnover rate for the enzyme. To conduct this experiment
  Nortriptyline (NT) was administered Q8 hrs for a period of 29 days . In this we
  assume that the intrinsic clearance of NT is depedent on the synthesis of enzyme.
  We will model the time dependant change in elimination rate constant of a drug.

The basic workflow for the estimation process is:

 1. Description of the data
 2. NCA Exploratory Analysis
 3. Pharmacokinetic modelling
 4. Diagnostic Plots
 5. Validation

Lets load the necessary `libraries` before we get started

```julia
using PumasTutorials
using Random
using CSV
using Pumas
using Plots
using StatsPlots
using Pipe
using StatsBase
```

## Description of the given data

To conduct this experiment Nortriptyline (NT) **10 mg** was administered orally
 Q8 hrs for a period of 29 days (696 hrs) (_'87 additional doses'_). On day 9
 (216 hrs), the drug pentobarbital (PB) is administered ans stopped on day 21.5
 (516 hrs). PK samples are collected at times `168, 171, 172, 175, 216, 360, 361,
  363, 365, 368, 384, 432, 504, 505, 507, 509, 552, 600, 696, 697, 699, 701, 704 hrs`.

The following are the units of the dataset:

 * Time (time) = hrs
 * Plasma Concentration (Conc) = nM
 * Dose (amt) = μg

_Note:_ For all calculation make sure to convert the dose to nM

```julia
pk21_data_df = CSV.read("/Users/Parsshava/Desktop/Julia/PumasTutorials.jl/tutorials/PKPDDataAnalysisBook/pk21_fit/pk_21.csv",
    DataFrame, missingstrings = ["", ".", "NA", "BQL"])
```

Basic summary `statistics` of the data

```julia
stats_pk21_data = describe(pk21_data_df, :min, :max, :mean, :std, :nmissing, cols=[:id,:time,:dv])
```

## NCA Analysis

We will perform an `NCA Analysis` of the given data to obtain the AUC for
 the pre-induction.

 **Pre-Induction Phase**

```julia
pk21_data_nca_pre = filter(x -> (x.time >= 168.0 && x.time <= 175.0), pk21_data_df)
select!(pk21_data_nca_pre, :id, :time, :dv)
dropmissing!(pk21_data_nca_pre)

pk21_nca_pre = read_nca(pk21_data_nca_pre,
                        id     = :id,
                        time   = :time,
                        conc   = :dv)
```

We will calculate the `AUC` of the given data for the _pre-induction phase_.

```julia
pk21_nca_auc_pre = NCA.auc(pk21_nca_pre, auctype=:last)
describe(pk21_nca_auc_pre)
```

**Induction Phase**

```julia
pk21_data_nca_ss = filter(x -> (x.time >= 504.0 && x.time <= 509.0), pk21_data_df)
select!(pk21_data_nca_ss, :id, :time, :dv)
dropmissing!(pk21_data_nca_ss)

pk21_nca_ss = read_nca(pk21_data_nca_ss,
                         id     = :id,
                         time   = :time,
                         conc   = :dv)
```

We will calculate the `AUC` of the given data for the _induction phase_.

```julia
pk21_nca_auc_ss = NCA.auc(pk21_nca_ss, auctype=:last)
describe(pk21_nca_auc_ss)
```

  * The pre-induction clearance can be calculated from Clpre = Dose/AUcpre,
     i.e **Clpre = 55.02 L/hr**

  * The Induction clearance can be calculated from Clss = Dose/AUcss,
     i.e **Clss = 149.94 L/hr**

  * The Kout parameters is obtained from the data. It takes approximately **150 hrs**
     for the drug to reduce to 50% of drug level.

## Pharmacokinetic Modelling

##### Read the dataset into read_pumas()

We have used two covariates TBP and TBP2, TBP represents the time at which the inducer
 PB is started i.e **216 hrs** and TBP2 represnts the time at which the inducer PB is
 stopped i.e **516 hrs**

```julia
pk21_data = read_pumas(pk21_data_df,
                       id           = :id,
                       time         = :time,
                       observations = [:dv],
                       amt          = :amt,
                       evid         = :evid,
                       rate         = :rate,
                       cmt          = :cmt,
                       covariates   = [:TBP, :TBP2])
```

##### One-Compartment Absorption Model

This is a one-compartment model with time-dependant change in clearance. We dont
 include the pharmacokinetics of pentobarbital (inducing enzyme).

```julia
pk_21        = @model begin
  @param begin
    tvka     ∈ RealDomain(lower=0, upper=10)
    tvclss   ∈ RealDomain(lower=0, upper=300)
    tvlag    ∈ RealDomain(lower=0, upper=2)
    tvclpre  ∈ RealDomain(lower=0, upper=100)
    tvkout   ∈ RealDomain(lower=0, upper=1)
    tvv      ∈ RealDomain(lower=0, upper=2500)
    Ω        ∈ PDiagDomain(2)
    σ²_prop  ∈ RealDomain(lower=0)
  end

  @random begin
    η        ~ MvNormal(Ω)
  end

  @covariates TBP TBP2

  @pre begin
    Ka       = tvka
    Clpre    = tvclpre * exp(η[1])  # Preinduction Clearance
    Clss     = tvclss * exp(η[2])   # Induced SS Clearance
    lags     = (Depot=tvlag,)
    Vc       = tvv
    Kout     = tvkout

    ## Pre-induced State
    Kpre     = Clpre/Vc
    Kss      = Clss/Vc

    ## Peri-induced State
    Kperi    = Kss-(Kss-Kpre)*exp(-Kout*(t-TBP))

    ## Post-induced State
    A        = Kss - (Kss-Kpre)*exp(-Kout*(TBP2-TBP))
    Kpost    = Kpre - (Kpre-A)*exp(-Kout*(t-TBP2))

    K10      = (t<TBP) * Kpre + (t>=TBP && t<TBP2) * Kperi + (t>=TBP2) * Kpost
  end

  @dynamics begin
    Depot'   = -Ka*Depot
    Central' =  Ka*Depot - K10*Central
  end

  @derived begin
    cp       = @. (1000/263.384)*Central/Vc
    dv       ~ @. Normal(cp, sqrt(cp^2*σ²_prop))
  end
end
```

We have obtained the initial estimates from some derivation and graphically.

```julia
param_est = ( tvka    = 3,
              tvclss  = 149,
              tvlag   = 0.7,
              tvclpre = 55,
              tvkout  = 0.005,
              tvv     = 1260,
              Ω       = Diagonal([0.02,0.02]),
              σ²_prop = 0.01)
```

##### NaivePooled Analysis

A quick estimation of the mean parameters can be done by performing a NaivePooled
 Analysis. This will give us a good judgemnt of the parameters obtained and
 provide better inital estimates for the fitting.

```julia
pk_21_fit_nv = @time fit(pk_21, pk21_data, param_est,
                          Pumas.NaivePooled(), ensemblealg=EnsembleThreads(),
                          omegas=(:Ω,))

coeftable(pk_21_fit_nv)
```

##### Without LagTime

We will estimate the data using `FOCEI`

```julia
pk_21_nolag_fit = @time fit(pk_21, pk21_data, param_est,
                            Pumas.FOCEI(), ensemblealg=EnsembleThreads(),
                            constantcoef=(tvlag=0.00001,))

coeftable(pk_21_nolag_fit)
```

##### With LagTime

```julia
pk_21_lag_fit = @time fit(pk_21, pk21_data, param_est,
                         Pumas.FOCEI(), ensemblealg=EnsembleThreads())

coeftable(pk_21_lag_fit)
```

We will obtain the `precision` of the parameters

```julia
pk_21_lag_infer   = coeftable(infer(pk_21_lag_fit))
```

We will `inspect` the diagnostics of the model before we go for the goodness of fit plots.

```julia
pk_21_nolag_inspect = inspect(pk_21_nolag_fit) |> DataFrame
pk_21_lag_inspect = inspect(pk_21_lag_fit) |> DataFrame
```

## Diagnostic Plots

##### Goodness of Fit Plots

 **Without Lag Time**

```julia
theme(:wong2)

function gof(pktvp_mr_inspect_run2)
  p1 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
      p1,
      :dv_pred, :dv;
      ylabel = "Observed dv (nM)",
      xlabel = "Population Predicted (nM)",
      label = "",
      legend=false,
  )
  Plots.abline!(p1,  1, 0; primary = false, color=:red, linewidth=4)

  #
  p2 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p2,
    :dv_ipred, :dv;
    ylabel = "Observed Plasma` Conc (nM)",
    xlabel = "Individual Predicted (nM)",
    label = "",
    legend=false,
  )
  Plots.abline!(p2, 1, 0; primary = false, color=:red, linewidth=4)

  p3 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
    p3,
    :time, :dv_wres;
    xlabel = "Time (hr)",
    ylabel = "Conditional Weighted Residuals",
     legend=false
  )
  Plots.abline!(p3, 0, 0; primary = false, color=:red, linewidth=4)

  p4 = plot()
  @df pktvp_mr_inspect_run2 scatter!(
   p4,
   :dv_pred, :dv_wres,
   xlabel = "Population Predicted (nM)",
   ylabel = "Conditional Weighted Residuals",
   legend=false
  )
  Plots.abline!(p4, 0, 0; primary = false, color=:red, linewidth=4)

  return plot(p1,p2,p3,p4; size = (1000, 1000))
end

gof(pk_21_nolag_inspect)
```

 **With Lag time**

```julia
gof(pk_21_lag_inspect)
```

We will compare other metrics and statistics, such as `aic` and `bic`. The aic
 and bic values are lower for the model **with lag time** which indicates a better
 fit of the data.

```julia
DataFrame([(metric=string(f), fit_nolag=f(pk_21_nolag_fit), fit_lag=f(pk_21_lag_fit)) for f in (aic, bic)])
```

##### η-Distribution

```julia
data21_etacov = select(pk_21_lag_inspect,["η_1", "η_2"])
data21_etacov = stack(data21_etacov, ["η_1", "η_2"])
data21_etacov[!,:variable] .= string.(data21_etacov.variable)
@df data21_etacov groupedviolin(:variable,:value,
                               alpha =0.5, legend=false)
@df data21_etacov groupedboxplot!(:variable,:value,
                               alpha =0.5, label ="")
Plots.abline!(0,0, linewidth=4, color = "black",
              size = (600, 600),
              xlabel = "η's", ylabel = "η_values",
              guidefontsize = 22,
              tickfontsize =14, label ="")
```

## Validation

We will perform a validation of the final model using a `Visual Predictive Check`.

```julia
pk_vpc = vpc(pk_21_lag_fit, 200; dv=:dv,
              ensemblealg=EnsembleSerial())

plot(pk_vpc,
    size=(800,800), xlabel="Time after dose (hr)",
    ylabel = "Concentration (nM)" ,
    titlefontsize=20,guidefontsize=20,
    markersize=7, markeralpha = 0.5, markercolor =:grey,
    observations = true,
    observed_quantiles = true,
    simquantile_medians = true,
    ci_bands = true,
    legend=true, legendfontsize = 12,
    titlefontcolor = :blue,
    linewidth = 5,
    xtickfont = font(20),
    ytickfont = font(20))
```
